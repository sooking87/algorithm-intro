# 2116313 손수경
# 1번을 해보세요!
def binary_digits(n):
    if n <= 1:
        return 1
    else:
        return 1 + binary_digits(n // 2)


# 2번을 해보세요!
n = int(input())


# 출력합니다!
print(binary_digits(n))

'''
종료조건에서 n < 1일 때 return 0을 하나 위의 코드랑 똑같긴 함. 그렇다고 한 번 더 해서 비효율적인거는 아니다. 선택의 문제이다. 

기본연산은 묶을 수 있는 거는 하나로 묶는게 좋다. 진짜로 cpu에서는 사칙 연산 중 곱셈이 조금 더 느리긴하다ㅏ. 덧셈도 실수 덧셈, 실수 곱셈, 정수 덧셈, 정수 곱셈 연산 속도는 다르지만 하나의 상수로 처리를 하는 것이다. 

덧셈기와 곱셈기가 따로 있고, 곱셈 전용 HW가 있다. 실제로는 CPU 클럭을 덧셈기는 한 번쓰고, 곱셈기는 여러번 쓴다. 기본적으로 실제적으로는 보는 것이 맞다. 

그러나 정해진 횟수만큼 도는 것이기 때문에 상수 하나로 봐도 된다. 
'''
